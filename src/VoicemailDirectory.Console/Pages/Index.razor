@page "/"
@inject HttpClient Http

<PageTitle>Voicemail Management Console</PageTitle>
<h1>Voicemail Management Console</h1>

@if (recordingMetadata == null)
{
    <p>No recording found.</p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Date</th>
                <th>Caller</th>
                <th>Duration</th>
                <th>Transcription</th>
                <th>Status</th>
                <th>Recording</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var recording in recordingMetadata)
            {
                <tr>
                    <td>@recording.Date.ToShortDateString() @recording.Date.ToShortTimeString()</td>
                    <td>@recording.CallerNumber</td>
                    <td>@recording.Duration</td>
                    <td>@recording.Transcription</td>
                    <td>@recording.Status</td>
                    <td>
                        <audio controls>
                            <source src=@($"{Http.BaseAddress}/Voicemails/{recording.RecordingSID}.mp3") type="audio/mpeg">
                        </audio>
                    </td>
                    <td>
                        <button type="button" class="btn btn-primary" @onclick="() => SaveRecording(recording.RecordingSID)">Save</button>
                        <button type="button" class="btn btn-danger" @onclick="() => DeleteRecording(recording.RecordingSID)">Delete</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private Recording[]? recordingMetadata;

    protected override async Task OnInitializedAsync() => await UpdateTable();
    
    private async Task SaveRecording(string recordingSid)
    {
        await Http.PatchAsync($"/RecordingManagement/Save/{recordingSid}", null);
        await UpdateTable();
    }
    
    private async Task DeleteRecording(string recordingSid)
    {
        await Http.DeleteAsync($"/RecordingManagement/Delete/{recordingSid}");
        await UpdateTable();
    }

    private async Task UpdateTable() => recordingMetadata = await Http.GetFromJsonAsync<Recording[]>("/RecordingManagement/Index");
}

